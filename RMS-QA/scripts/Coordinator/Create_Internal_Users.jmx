<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Create internal users" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Coordinator" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1491935945000</longProp>
        <longProp name="ThreadGroup.end_time">1491935945000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <intProp name="maxSize">1</intProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">RMS\Data\Internal_Users.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="http" elementType="Argument">
              <stringProp name="Argument.name">http</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.desc">protocol</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ip" elementType="Argument">
              <stringProp name="Argument.name">ip</stringProp>
              <stringProp name="Argument.value">52.14.244.144</stringProp>
              <stringProp name="Argument.desc">ip address</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">/RMS.BusinessUnit.NewYorkUnit/</stringProp>
              <stringProp name="Argument.desc">URL path</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Username" elementType="Argument">
              <stringProp name="Argument.name">Username</stringProp>
              <stringProp name="Argument.value">polarissupport@polaristest.net</stringProp>
              <stringProp name="Argument.desc">USERNAME</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Password" elementType="Argument">
              <stringProp name="Argument.name">Password</stringProp>
              <stringProp name="Argument.value">Polaris123!</stringProp>
              <stringProp name="Argument.desc">PASSWORD</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Home Page" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 ${path}DefaultBU1.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}DefaultBU1.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15 ${path}DefaultBU1.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ScriptManagerMain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ScriptManagerMain</stringProp>
                  <stringProp name="Argument.value">ScriptManagerMain|btnsubmit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636100799240000000:4fe47e37:662bc458;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:1c2121e:3e0dfe6c:d7e35272;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:7681543b:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:24ee1bba:f46195d3:c128760b:1e771326:2003d0b8:aa288e2d:258f1c72:92fe8ea0:fa31b949:874f8ea2:4877f69a:19620875:490a9d4e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">btnsubmit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">C7A5D739</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdAAaRK/qGCy8AgSJxvACnrtJ5ULCqfMP5FPbAxDA5+H80zmN6ZYJNGAQHn0c9zMgZU3B2NvjHOkq5wKoqN6Aim8WGH3nra93OB915opICXNmZSAL+NAxxXEPzRO7SVJwAXsnDw8HedzY2+We9zfEVPM/rZvgHlFT5okX/VKGAyK5WfQ==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hdnProjectName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hdnProjectName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ddlLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ddlLanguage</stringProp>
                  <stringProp name="Argument.value">English</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ddlLanguage_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ddlLanguage_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="txtUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txtUserName</stringProp>
                  <stringProp name="Argument.value">${Username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="txtPassword" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txtPassword</stringProp>
                  <stringProp name="Argument.value">${Password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__ASYNCPOST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__ASYNCPOST</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="RadAJAXControlID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">RadAJAXControlID</stringProp>
                  <stringProp name="Argument.value">RadAjaxManagerProductMater</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}DefaultBU1.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}DefaultBU1.aspx</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-MicrosoftAjax" elementType="Header">
                  <stringProp name="Header.name">X-MicrosoftAjax</stringProp>
                  <stringProp name="Header.value">Delta=true</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16 ${path}GMSModeSelection.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}GMSModeSelection.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}DefaultBU1.aspx</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28 ${path}GMSModeSelection.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctl00$ScriptManagerMain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ScriptManagerMain</stringProp>
                  <stringProp name="Argument.value">ctl00$ScriptManagerMain|ctl00$ContentPlaceHolder1$lnkAdminEducational</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636184410420000000:2221d3e:5915480e:20b66de5:155fb77e;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:3e0dfe6c:d7e35272:4f5793d0:623b54e:ed2942d4:c5d7b491;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:24ee1bba:92fe8ea0:f46195d3:fa31b949:874f8ea2:4877f69a:c128760b:19620875:490a9d4e:c172ae1e:9cdfc6e7:e330518b:2003d0b8:1e771326:c8618e41:e4f8f289:1a73651d:333f8d94</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">ctl00$ContentPlaceHolder1$lnkAdminEducational</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">/wEPDwUJLTIxNjI3MDQ0DxYCHhNWYWxpZGF0ZVJlcXVlc3RNb2RlAgEWAmYPDxYMHgZVc2VySWQCAR4TVHJhbnNmZXJPZk93bmVyc2hpcGceCmxhbmd1YWdlSUQFYDE4MTk5RjBGQ0ZDNDkzNDdBQjA3RTdFNUMwREMyOTg2MTBEMEVGMkJDM0VFNkI5MTM0Mjg0QjNGNTA1MTlGRTVDODVCRUZDMDA1OEUzQzc1REQ4NTFERkNBQjI0ODJDNR4KQWN0dWFsVGltZQItHgNNaW4FATIeCEJhc2VQYXRoBTFodHRwOi8vNTIuMTQuMjQ0LjE0NC9STVMuQnVzaW5lc3NVbml0Lk5ld1lvcmtVbml0ZBYCAgMPZBZGAgcPFgIeB1Zpc2libGVoFgICAQ8PFgIeBFRleHQFCk15IEFjY291bnRkZAIJDxYCHwdoZAILDw8WAh8IBQRIZWxwZGQCDQ8WAh8HaBYCAgEPDxYCHwgFD0NoYW5nZSBQYXNzd29yZGRkAg8PFgIfB2hkAhEPDxYCHwgFA0ZBUWRkAhMPZBYCAgEPDxYCHwgFDlByaXZhY3kgUG9saWN5ZGQCFQ8WAh8HaGQCFw8WAh8HaBYCAgEPDxYCHwgFB0xvZyBvdXRkZAIZDw8WBB4HVG9vbFRpcAUESG9tZR8HZ2RkAhsPDxYEHwgFCk15IEFjdGlvbnMfB2hkZAIdDw8WBB8IBQ5BZG1pbmlzdHJhdGlvbh8HaGRkAh8PDxYCHwgFFE1vZHVsZSAvIFJvbGUgU2VsZWN0ZGQCIQ8PFgIfCAUOU3lzdGVtIEhpc3RvcnlkZAIjDw8WBB8IBQ9Vc2VyIE1hbmFnZW1lbnQfCQUsVGhpcyB0YWIgd2lsbCBwcm92aWRlIGFjY2VzcyB0byBtYW5hZ2UgVXNlcnNkZAIlDw8WBB8IBRdHcmFudCBSZXZpZXcgTWFuYWdlbWVudB8JBSxUaGlzIHRhYiB3aWxsIHByb3ZpZGUgYWNjZXNzIHRvIG1hbmFnZSBncmFudGRkAicPFgQeCWlubmVyaHRtbAUYQ29tbXVuaWNhdGlvbiBNYW5hZ2VtZW50HgV0aXRsZQU+VGhpcyB0YWIgd2lsbCBwcm92aWRlIGFjY2VzcyB0byBtYW5hZ2UgY29tbXVuaWNhdGlvbiB0ZW1wbGF0ZXNkAikPDxYEHwgFD0xpc3QgTWFuYWdlbWVudB8JBTJUaGlzIHRhYiB3aWxsIHByb3ZpZGUgYWNjZXNzIHRvIG1hbmFnZSBsaXN0IHZhbHVlc2RkAisPDxYEHwgFGUJ1c2luZXNzIFJ1bGVzIE1hbmFnZW1lbnQfCQU1VGhpcyB0YWIgd2lsbCBwcm92aWRlIGFjY2VzcyB0byBtYW5hZ2UgYnVzaW5lc3MgcnVsZXNkZAItDw8WBB8IBRFCdWRnZXQgTWFuYWdlbWVudB8JBS1UaGlzIHRhYiB3aWxsIHByb3ZpZGUgYWNjZXNzIHRvIG1hbmFnZSBidWRnZXRkZAIvDw8WBB8IBQ1DcmVhdGUgQWdlbmRhHwkFLVRoaXMgdGFiIHdpbGwgcHJvdmlkZSBhY2Nlc3MgdG8gbWFuYWdlIGFnZW5kYWRkAjEPDxYEHwgFDlN5c3RlbSBIaXN0b3J5HwkFNVRoaXMgdGFiIHdpbGwgcHJvdmlkZSBhY2Nlc3MgdG8gbWFuYWdlIFN5c3RlbSBIaXN0b3J5ZGQCMw8PFgQfCAUQTWFuYWdlICBNYXBwaW5ncx8JBS9UaGlzIHRhYiB3aWxsIHByb3ZpZGUgYWNjZXNzIHRvIG1hbmFnZSBNYXBwaW5nc2RkAjUPDxYEHwgFElRyYW5zZmVyIE93bmVyc2hpcB8JZWRkAjsPZBYIAgMPDxYCHwgFFU1vZHVsZS9Sb2xlIFNlbGVjdGlvbmRkAgUPDxYCHwgFD1BvbGFyaXMgU3VwcG9ydGRkAgkPZBYGAgEPZBYCAgEPZBYCAgEPDxYCHwgFAkdDZGQCAw9kFgICAQ9kFgICAQ8PFgIfCAUIQXBwcm92ZXJkZAIFD2QWAgIBD2QWAgIBDw8WAh8IBRJSZWFkLU9ubHkgUmV2aWV3ZXJkZAILDw8WAh8HZ2QWBgIBD2QWBgIBDw8WAh8IBQJHQ2RkAgMPDxYCHwgFEEVkdWNhdGlvbiBNb2R1bGVkZAIFDw8WAh8IBRFDb21tZXJjaWFsIE1vZHVsZWRkAgMPZBYGAgEPZBYCAgEPDxYCHwgFCEFwcHJvdmVyZGQCAw8PFgIfCAUQRWR1Y2F0aW9uIE1vZHVsZWRkAgUPDxYCHwgFEUNvbW1lcmNpYWwgTW9kdWxlZGQCBQ9kFgYCAQ9kFgICAQ8PFgIfCAUSUmVhZC1Pbmx5IFJldmlld2VyZGQCAw8PFgIfCAUQRWR1Y2F0aW9uIE1vZHVsZWRkAgUPDxYCHwgFEUNvbW1lcmNpYWwgTW9kdWxlZGQCQQ8PFgIfCAUKQ29udGFjdCBVc2RkAkMPDxYCHwgFDFRlcm1zIG9mIFVzZWRkAkUPPCsABAEADxYIHhVFbmFibGVFbWJlZGRlZFNjcmlwdHNnHhxFbmFibGVFbWJlZGRlZEJhc2VTdHlsZXNoZWV0Zx4SUmVzb2x2ZWRSZW5kZXJNb2RlCylyVGVsZXJpay5XZWIuVUkuUmVuZGVyTW9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNi4xLjIyNS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0Ah4LTmF2aWdhdGVVcmwFsAFodHRwOi8vNTIuMTQuMjQ0LjE0NC9STVMuQnVzaW5lc3NVbml0Lk5ld1lvcmtVbml0L0hlbHAvR3Vlc3RGQVEuYXNweD9sYW5ndWFnZUlEPTE4MTk5RjBGQ0ZDNDkzNDdBQjA3RTdFNUMwREMyOTg2MTBEMEVGMkJDM0VFNkI5MTM0Mjg0QjNGNTA1MTlGRTVDODVCRUZDMDA1OEUzQzc1REQ4NTFERkNBQjI0ODJDNWRkAkcPPCsABAEADxYIHwxnHw1nHw4LKwQCHw8FsQFodHRwOi8vNTIuMTQuMjQ0LjE0NC9STVMuQnVzaW5lc3NVbml0Lk5ld1lvcmtVbml0L0hlbHAvR3Vlc3RIZWxwLmFzcHg/bGFuZ3VhZ2VJRD0xODE5OUYwRkNGQzQ5MzQ3QUIwN0U3RTVDMERDMjk4NjEwRDBFRjJCQzNFRTZCOTEzNDI4NEIzRjUwNTE5RkU1Qzg1QkVGQzAwNThFM0M3NUREODUxREZDQUIyNDgyQzVkZAJJDzwrAAQBAA8WCB8MZx8NZx8OCysEAh8PBbABaHR0cDovLzUyLjE0LjI0NC4xNDQvUk1TLkJ1c2luZXNzVW5pdC5OZXdZb3JrVW5pdC9Qcml2YWN5UG9saWN5LmFzcHg/bGFuZ3VhZ2VJRD0xODE5OUYwRkNGQzQ5MzQ3QUIwN0U3RTVDMERDMjk4NjEwRDBFRjJCQzNFRTZCOTEzNDI4NEIzRjUwNTE5RkU1Qzg1QkVGQzAwNThFM0M3NUREODUxREZDQUIyNDgyQzVkZAJLDzwrAAQBAA8WCB8MZx8NZx8OCysEAh8PBaoBaHR0cDovLzUyLjE0LjI0NC4xNDQvUk1TLkJ1c2luZXNzVW5pdC5OZXdZb3JrVW5pdC9Db250YWN0LmFzcHg/bGFuZ3VhZ2VJRD0xODE5OUYwRkNGQzQ5MzQ3QUIwN0U3RTVDMERDMjk4NjEwRDBFRjJCQzNFRTZCOTEzNDI4NEIzRjUwNTE5RkU1Qzg1QkVGQzAwNThFM0M3NUREODUxREZDQUIyNDgyQzVkZAJNDzwrAAQBAA8WCB8MZx8NZx8OCysEAh8PBa0BaHR0cDovLzUyLjE0LjI0NC4xNDQvUk1TLkJ1c2luZXNzVW5pdC5OZXdZb3JrVW5pdC9UZXJtc29mVXNlLmFzcHg/bGFuZ3VhZ2VJRD0xODE5OUYwRkNGQzQ5MzQ3QUIwN0U3RTVDMERDMjk4NjEwRDBFRjJCQzNFRTZCOTEzNDI4NEIzRjUwNTE5RkU1Qzg1QkVGQzAwNThFM0M3NUREODUxREZDQUIyNDgyQzVkZAJPDzwrAAQBAA8WBh8MZx8NZx8OCysEAmRkAlEPPCsABAEADxYGHwxnHw1nHw4LKwQCZGQCUw8PFgofDGceDFNob3dJbnRlcnZhbAKgvJ0BHgVWYWx1ZQUTU2Vzc2lvbkV4cGlyZWQuYXNweB8OCysEAR8NZ2QWBGYPDxYEHwxnHw4LKwQBZGQCAQ8UKwACFCsAAhQrAAIPFhAfDWceE0VuYWJsZUVtYmVkZGVkU2tpbnNnHhdFbmFibGVBamF4U2tpblJlbmRlcmluZ2ceFEVuYWJsZVJvdW5kZWRDb3JuZXJzZx4NRW5hYmxlU2hhZG93c2geClJlbmRlck1vZGULKwQBHwxnHw4LKwQBZGRkZGQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgsFDWN0bDAwJGxua0hvbWUFEmN0bDAwJHJhZFdpbmRvd0ZBUQUTY3RsMDAkcmFkV2luZG93SGVscAUcY3RsMDAkcmFkV2luZG93UHJpdmFjeVBvbGljeQUWY3RsMDAkcmFkV2luZG93Q29udGFjdAUUY3RsMDAkcmFkV2luZG93VGVybXMFEmN0bDAwJHJhZFdpbmRvd0dlbgUSY3RsMDAkcmFkV2luZG93TG9hBRZjdGwwMCRSYWROb3RpZmljYXRpb24xBR9jdGwwMCRSYWROb3RpZmljYXRpb24xJFhtbFBhbmVsBSBjdGwwMCRSYWROb3RpZmljYXRpb24xJFRpdGxlTWVuddjmDIAjwE2j2QJKi8YqWWfRn/T0nXmG0CCasLZ7pMkl</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">1FA9E041</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__PREVIOUSPAGE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__PREVIOUSPAGE</stringProp>
                  <stringProp name="Argument.value">65uPzvMIZvTG4gvD82UJITSOtg12g4kuCNWGeGvZiwaBCK3pvI2-XZibMILiQplioee4I_bJA67yZEDVNq0OCZ44Po1KSSgylArSkgu-THgmmIpDqONgFzAqW5QsdvEIadGJwMeMqqpPUBWBEcGeGA2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdABAid1KW8y2xJgC0Nb8Vvm5kFSptkDm3zh7+G5RAX6wIBLVvuHHgTmO0XKh/Hbou8oDB6MwgaDIiRS0EG3ov3l474UBueI2dLNTBv3DaRtO94X6dmNXpiql1Fw5yTRZrEJ0VXRtX9rSQ1S6jbAiu5x2Jb31aQ1GpmKnCBU2ZQLTMlYlu05TAKoPYiI8xQCODAsahxDfrW/DdXQWjHannNy4KTU3Da5SOby5fKHWyJnaFPb0x0FQcZt37m7/13j9QAOTmAmLvPRn/GVdSBm9O/UYlY2e4Do3mvYY39stUuuYyc2tGywxS3Zwlb5FyRrvmCJigxZrQflDSism1HQcuuYAaJJOK+5NVm8P0tgs+vSbcDRQ8WobTMkp8OEbTlChUFLw=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowGen_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowGen_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowLoa_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowLoa_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$RadNotification1$hiddenState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$RadNotification1$hiddenState</stringProp>
                  <stringProp name="Argument.value">SessionExpired.aspx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_XmlPanel_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_XmlPanel_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_TitleMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_TitleMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__ASYNCPOST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__ASYNCPOST</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="RadAJAXControlID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">RadAJAXControlID</stringProp>
                  <stringProp name="Argument.value">ctl00_RadAjaxManagerProductMater</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}GMSModeSelection.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}GMSModeSelection.aspx</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-MicrosoftAjax" elementType="Header">
                  <stringProp name="Header.name">X-MicrosoftAjax</stringProp>
                  <stringProp name="Header.value">Delta=true</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="29 ${path}Admin/AdminInbox.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E</stringProp>
                  <stringProp name="Argument.value">E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminInbox.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}GMSModeSelection.aspx</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Click User Mgmt" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="37 ${path}Admin/AdminInbox.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctl00$ScriptManagerMain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ScriptManagerMain</stringProp>
                  <stringProp name="Argument.value">ctl00$ScriptManagerMain|ctl00$lnkAdminUserManagement</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636184410420000000:2221d3e:5915480e:20b66de5:155fb77e;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:3920021:d7e35272:aac1aeb7:c86a4a06:1c2121e:9e1572d6:3e0dfe6c:4f5793d0:623b54e:ed2942d4:c5d7b491;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:57c52860:aa8c3a12:ab5f5028:7a191ebc:20fc936d:7681543b:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:24ee1bba:f46195d3:c128760b:1e771326:2003d0b8:aa288e2d:b092aa46:7c926187:8674cba1:b7778d6c:c08e9f8a:a51ee93e:59462f1:258f1c72:58366029:92fe8ea0:fa31b949:874f8ea2:4877f69a:19620875:490a9d4e:c172ae1e:9cdfc6e7:e330518b:c8618e41:e4f8f289:1a73651d:333f8d94</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">ctl00$lnkAdminUserManagement</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__SCROLLPOSITIONX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__SCROLLPOSITIONX</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__SCROLLPOSITIONY" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__SCROLLPOSITIONY</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdAHavVXD1oYELeveMr0vHCmYPb9nqwdWypTtCemG9feioPOpGM6pmY1E/IpLQTEONXJEykrk6MhqChj+uqn1YT72JBW6w17ed7b0IHTx0ZCWgnd+oEQG/z68nx61SI04CmVmJ97AZkO7zLypKHIp3sU7ztW+4ceBOY7RcqH8dui7ygMHozCBoMiJFLQQbei/eXjvhQG54jZ0s1MG/cNpG073hfp2Y1emKqXUXDnJNFmsQnRVdG1f2tJDVLqNsCK7nHYkIpCEnYgFhCIx3oNVwW3cF0PqXqzNR/Sx+qPcm3YYGNm99WkNRqZipwgVNmUC0zJU9kJvMKcK3EvV+CKVnL0PqGKZCjAInA1i3vforpzHplvvzLCOAm6Iw76UT/LP+jLKU54mgUlq9sl1aA3hxYZ4FCIUwMijum/AWcOogz/ybNrMYnSbn0/ljfu+TztyNqT37Yo/r5ixwszEMF+qJDjyIU6KdjnnNEF0yp2EGA5ZHDDBnG1toyNZEBP+qrZaDntRXmV1b8mQ1nX83vqHG7JjfGqI311mdInGKxK4rLJQtP11pFqMnUhKKGGcOo6RhS2vfkhWEt8QtoGjqhxVG8Ij+SefNACyDi7eqTHAw4yOn6vKvisUFnX8kQOj91jkXmydI4YnQpwXJ6CZULEnqCoSddZY0QFCtPNvob/wkzdfXuNqdUeWBrW3OXOGOJuxF3K3oyemOkx2fji1pVFcipjKnS6DG+BbqcGwBdbIHRhU+v77httnRj+QgrDaeqm5iXwmqJ1hlPowzPvS6swRhu3Fx0j2t0CgEjwD9Or7+vXJT7oOgKdQHdCqRrhAdqOJZ5kK+sIs6g50YGX3np0RDthf3trthc8Ton1Na1CM/XTklFj0FMz8mLO+sTL9e5blMNE7+P/lyRZLI6MGmnF4Pit3aijL+ofAV4XMWVuekj8y62uVSZfGENhH1QdFRJ4h6jCGnFOm0UnSxxiN2/WmfnShrhzc5rI4UItK191/2Jj9kwaM/qz6glI9mo5wMGCU6MQ6UsdWWe1X6tzl8b6VZsGGSeoIVR69D5YmPgrqbNz1RGtCMbkOYcCWVfddfL4W8ZQmRa22zB9AMRwSNIBgrw2QExpkc7Ps4AK2z2aH7ZwWBkvmCD21/XZnXR1Aqj85SXuFLlRPe9DSkH+bNOS7X0GOQoMCJ34/d/QOuAv0o+vTQgN9nZF/Hd5t0fM1hO4jdZs9rr+scuiexLQGN3+LGnLRImGpInZKHdB88PDLnfC79luA0cyV+GgQLAvX4T39qB7ckmqt/AQheWzzk7fPZTRyzHQ9fR/yRCfiaJPcxGQ9PLG7TaJxBQdgcRmHCYmFnPJthPJmUMpxGlBZpZ1usvYdl/YsQ01DQsxr6ALU1lQ66Pewdn7sLBHTyI2LFkPqrVnOAHoyWxO0M0wY1ju2E/++NdGxqHwKUtDOEfVQT9FGng2Gj+g/0v2Y5ImVox5wUEKXfoX3P/4tvEphtIObk5vZF/3a/Hy418LFu279ewBaKbzvS/A3GnGRTyiqK+f0y1SgyN5rGtr30tCM77on31NpsRTgQjIW6JqvjU4BWEDcrRQSYtmHigGd3lAcrZbCAiJk7+/Be6bO/Be48l10yr22v6OZ6QQhS6Pwvb53bq6a5XRiQPQ0uLsMkl+3GYrVzMI1tgy8FNRezkxjgR8IyU9VLCwv4Nhab97jqUGc6Ua4/v14JmEIacWh0FIoKKzGCtv7kYd/UFX0lfwYq1myiEK2EIJW2gmeyWahNGPxoLVSI9KdvLzp6E9TvhYoq6mvlMOArWKrQhuMcI5qQQ/5/ZHzSpuIvJkPPYIwxU2VFEqRhQt3x4I0xj7UL/VH47j0nXHAdvfB7jQnNyOgh3E9NT9+H3IK0LzoaVcQp2HyhVs0x0HPEnVrT8PcGiH2OHTzsicTZGBjxPsVIj1WmdsGjIEpgEUA8XJkN+GtavQJncCiNN5BAHrlXWmbP4ss1/8qgNmfEPaJgEyZ0IXDEZZZuNIUOsaSXHMHLN9Sy0304bdovAicHd9ooNatnFLgIbDbuX+/Ng75ZHdp16jFjZtpXAVPdrofC3kya2W036P/loGFECBtRa0L7NhcomqV8bZspyOwiy0Yq4aYHBhaTy0QqtTH5swVEfjJn0Gm+xsDh2M60fisb5id3fIIvvKyt8hRwMD6qw9uUFT1djulNjYwUR2C7MvhXJnBundVch/PePG2lykfvI+WyQsRWmPc4eUDBL1eXBTwIRBko3L4MKsHAWVD/llRl6R4HeZpgCRZG2+A8vvCKIyy484lA1L6iiFj+zGTlDLAIjO5s27syxy/uB3TQfC9rsYPyfZDblP5s29JjF9/X/BUrwGXonurLl9icbNL4DKzaDD/YNfkayIlSqR4vb6txSvcVHvqX47eNjzohhgJo0R1HRaOBE8DB2BDnLFKJLdTFCn2skwpja4pmCKdV0tpaxc2xlzVonZfTR3ARwWtGywxS3Zwlb5FyRrvmCJigxZrQflDSism1HQcuuYAayW65nuqeVg+dsmaqeboDvkP5OSwu4HO2kunSzyiFgJw=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_IsAdvanceSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_IsAdvanceSearch</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_AdvanceText" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_AdvanceText</stringProp>
                  <stringProp name="Argument.value">Show Advanced Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_HideText" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_HideText</stringProp>
                  <stringProp name="Argument.value">Hide Advanced Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_IsExplicitly_TAfilter_Apply" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_IsExplicitly_TAfilter_Apply</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_InternalStatusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_InternalStatusId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_grantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdn_grantId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdnHide_grant_internal_status_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdnHide_grant_internal_status_id</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdnDateFormate_byToggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdnDateFormate_byToggle</stringProp>
                  <stringProp name="Argument.value">dd MMM yyyy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$hdnAllStr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$hdnAllStr</stringProp>
                  <stringProp name="Argument.value">All</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtGrantID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtGrantID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtGrantTitle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtGrantTitle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$lbTherapeutic" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$lbTherapeutic</stringProp>
                  <stringProp name="Argument.value">All</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_lbTherapeutic_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_lbTherapeutic_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;All&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[0],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$lbWorkFlowStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$lbWorkFlowStatus</stringProp>
                  <stringProp name="Argument.value">All</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_lbWorkFlowStatus_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_lbWorkFlowStatus_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;All&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[0],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$chkReviewPhase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$chkReviewPhase</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$chkApprovalPhase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$chkApprovalPhase</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$chkPaymentPhase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$chkPaymentPhase</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$chkReconPhase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$chkReconPhase</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtOrganizationName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtOrganizationName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtRequestorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtRequestorName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtEventDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtEventDate</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtEventDate$dateInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtEventDate$dateInput</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_dateInput_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_dateInput_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;enabled&quot;:true,&quot;emptyMessage&quot;:&quot;&quot;,&quot;validationText&quot;:&quot;&quot;,&quot;valueAsString&quot;:&quot;&quot;,&quot;minDateStr&quot;:&quot;1980-01-01-00-00-00&quot;,&quot;maxDateStr&quot;:&quot;2099-12-31-00-00-00&quot;,&quot;lastSetTextBoxValue&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_calendar_SD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_calendar_SD</stringProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_calendar_AD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_calendar_AD</stringProp>
                  <stringProp name="Argument.value">[[1980,1,1],[2099,12,30],[2017,4,11]]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_txtEventDate_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtWithinDays" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtWithinDays</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$ddlInternalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$ddlInternalStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_ddlInternalStatus_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_ddlInternalStatus_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$txtKeyword" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$txtKeyword</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$ddlCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$ddlCountry</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_ddlCountry_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_ddlCountry_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl03$ctl01$PageSizeComboBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl03$ctl01$PageSizeComboBox</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_grdAdminGrantCME_ctl00_ctl03_ctl01_PageSizeComboBox_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_grdAdminGrantCME_ctl00_ctl03_ctl01_PageSizeComboBox_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl04$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl04$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2708</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl06$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl06$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2706</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl08$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl08$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2704</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl10$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl10$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2702</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl12$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl12$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl14$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl14$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2698</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl16$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl16$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2694</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl18$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl18$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2692</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl20$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl20$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2690</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl22$hdnGrant_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ctlCommonInbox$grdAdminGrantCME$ctl00$ctl22$hdnGrant_id</stringProp>
                  <stringProp name="Argument.value">2688</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ctlCommonInbox_grdAdminGrantCME_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ctlCommonInbox_grdAdminGrantCME_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowGen_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowGen_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_radWindowLoa_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowLoa_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00$RadNotification1$hiddenState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$RadNotification1$hiddenState</stringProp>
                  <stringProp name="Argument.value">../SessionExpired.aspx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_XmlPanel_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_XmlPanel_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_TitleMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_TitleMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__ASYNCPOST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__ASYNCPOST</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RadAJAXControlID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">RadAJAXControlID</stringProp>
                  <stringProp name="Argument.value">ctl00_RadAjaxManagerProductMater</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminInbox.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminInbox.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-MicrosoftAjax" elementType="Header">
                  <stringProp name="Header.name">X-MicrosoftAjax</stringProp>
                  <stringProp name="Header.value">Delta=true</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="38 ${path}Admin/AdminUserManagement.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E</stringProp>
                  <stringProp name="Argument.value">E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminUserManagement.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminInbox.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Click Create User" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="45 ${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctl00_StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636184410420000000:2221d3e:5915480e:20b66de5:155fb77e;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:9e1572d6:aac1aeb7:1c2121e:c86a4a06:ed2942d4:3e0dfe6c:d7e35272:4f5793d0:623b54e:c5d7b491;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:20fc936d:aa8c3a12:7681543b:ab5f5028:5da0f06:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:58366029:7c926187:8674cba1:b7778d6c:c08e9f8a:24ee1bba:f46195d3:c128760b:1e771326:2003d0b8:aa288e2d:258f1c72:a51ee93e:59462f1:e330518b:c8618e41:e4f8f289:1a73651d:333f8d94:92fe8ea0:fa31b949:874f8ea2:4877f69a:19620875:490a9d4e:c172ae1e:9cdfc6e7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">ctl00$ContentPlaceHolder1$lnkAdd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">F2E2B29D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdADFk1KsT978Hn1JxkGJeTtX5b9nqwdWypTtCemG9feioPOpGM6pmY1E/IpLQTEONXJEykrk6MhqChj+uqn1YT72JBW6w17ed7b0IHTx0ZCWgnd+oEQG/z68nx61SI04CmVmJ97AZkO7zLypKHIp3sU7ztW+4ceBOY7RcqH8dui7ygMHozCBoMiJFLQQbei/eXjvhQG54jZ0s1MG/cNpG073hfp2Y1emKqXUXDnJNFmsQnRVdG1f2tJDVLqNsCK7nHYkIpCEnYgFhCIx3oNVwW3cF0PqXqzNR/Sx+qPcm3YYGNm99WkNRqZipwgVNmUC0zJXyuDpJGJBPqPbJQytrafdwhRXXwPyajT/xwV/J2shm86POuHN4TNf5rC4qAlvPD1FdZQFHbTBgayafdkmOjinSUmzKFvIPLpWKTDfg87KkWgnLXs01BYLQsOy9xd89bkNapKzSaYKeekHe43Jo+cx1PXafhvPGOTVJ11vJyg3ZZ4RtzFlhjlLLJl+FHOZ0OuAIX/aD1arNqyHDg04hZVBEpbj96Gi+PvObsEYbEE+WpjvimSLevhmK81N0FeUn4M2YbziLx/4b9CkwuSMN6Rv8E7qYCRAbL4IvytaZLZig6DYY0bDM8jW84gJgc+3o76j3naMB5BqrrnV9pqcG3667u1kKm8Hk2Ik+I70HGNsGnNahYH5L5rtDFQ3+9gqqdW3PnGG1bEJVlucKTOMCtyocFjD+fHu5A1+/kgl5wGIi0rE6iHdBbipt8qHKeTocJbur+eIvQP+nhrKXptbliblBWJZZVCxWPo1Cse0ztA6hGkjI1Wm7VDBeb2Tnio6EoeAPo1PJgYiFLtLtiiXCJHKu/jdv8ag0/Q80+Xq7Pk9qOrp5P/tggVQJv9058CimbG0Ad9Ii9qlCykb0UUtOXcjdP0yAcC9J1E0BKvY2kVOVB0Tk5X8exeUAiyWSILthCd9pzUJs2GQpWt7HzjrNgQXd7Hbb1c32eaq1mFwoP3lYB2tGywxS3Zwlb5FyRrvmCJigxZrQflDSism1HQcuuYAauzf4TU4bM45L+18es0+GJNyMGrnetBh/P05Ziror47M=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_last_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_last_name</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_first_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_first_name</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_email_address" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_email_address</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date$dateInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date$dateInput</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_dateInput_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_dateInput_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;enabled&quot;:true,&quot;emptyMessage&quot;:&quot;&quot;,&quot;validationText&quot;:&quot;&quot;,&quot;valueAsString&quot;:&quot;&quot;,&quot;minDateStr&quot;:&quot;1900-01-01-00-00-00&quot;,&quot;maxDateStr&quot;:&quot;2099-12-31-00-00-00&quot;,&quot;lastSetTextBoxValue&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;minDateStr&quot;:&quot;1900-01-01-00-00-00&quot;,&quot;maxDateStr&quot;:&quot;2099-12-31-00-00-00&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_TemplateColumn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_TemplateColumn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl03$ctl01$PageSizeComboBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl03$ctl01$PageSizeComboBox</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl03_ctl01_PageSizeComboBox_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl03_ctl01_PageSizeComboBox_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_SD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_SD</stringProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_AD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_AD</stringProp>
                  <stringProp name="Argument.value">[[1900,1,1],[2099,12,31],[2017,4,11]]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_rfltMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_rfltMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowGen_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowGen_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowLoa_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowLoa_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$RadNotification1$hiddenState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$RadNotification1$hiddenState</stringProp>
                  <stringProp name="Argument.value">../SessionExpired.aspx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_XmlPanel_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_XmlPanel_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_TitleMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_TitleMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="46 ${path}Admin/AdminCreateInternalUser.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E</stringProp>
                  <stringProp name="Argument.value">E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminCreateInternalUser.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="55 ${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="55 ${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctl00_StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636184410420000000:2221d3e:5915480e:20b66de5:155fb77e;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:1c2121e:3920021:d7e35272:3e0dfe6c:4f5793d0:623b54e:ed2942d4:c5d7b491;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:7a191ebc:57c52860:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:24ee1bba:f46195d3:c128760b:1e771326:2003d0b8:aa288e2d:258f1c72:b092aa46:92fe8ea0:fa31b949:874f8ea2:4877f69a:19620875:490a9d4e:c172ae1e:9cdfc6e7:e330518b:c8618e41:e4f8f289:1a73651d:333f8d94</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">ctl00$ContentPlaceHolder1$lbRoleAssigned</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value">{&quot;Command&quot;:&quot;Check&quot;,&quot;Index&quot;:2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">D40DFA0C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdACgXZueEXmhoENnISE2BfyPqb9nqwdWypTtCemG9feioPOpGM6pmY1E/IpLQTEONXJEykrk6MhqChj+uqn1YT72JBW6w17ed7b0IHTx0ZCWgnd+oEQG/z68nx61SI04CmVmJ97AZkO7zLypKHIp3sU7ztW+4ceBOY7RcqH8dui7ygMHozCBoMiJFLQQbei/eXjvhQG54jZ0s1MG/cNpG073hfp2Y1emKqXUXDnJNFmsQnRVdG1f2tJDVLqNsCK7nHYkIpCEnYgFhCIx3oNVwW3cF0PqXqzNR/Sx+qPcm3YYGNm99WkNRqZipwgVNmUC0zJUgcWI1ewHG7UWa8L1rUt0jw2dkKhoZaqQ6V6+ICcYxac8SSZfobCqmapHRpR8VeYyb/lQaf3gaKsku6UaxWBMSQhRdH9UJEOl1CeTsH6C8ks40Jtp1BDHFighJ9bt/g8wJEsAKZZUojurgh4FKnF5OKb1WTdCM7SuKaB1i3cKVnPIvRdW/CU/42XgHeMPkFwo186C6LibA9rfzVZI1DbpdHR/KhcRx10x0W7mV3diAd/ABmwhRcYNyV9OYzC0vohwZG790r9+tLP9PwBbxj0PGgYZ6Z52HbEHewc+tGGQ/aVOCWLUh3mEOCltHmn2zYiaOEd8bo58Y+Oyd9Yz6Pvdzt4Me06ygVNHFZvsk5IKp1MIl++D7bgre7f9Aj5ip8AoI609FpUYEoHc/cE+ir/zPHyfSRlped8g0XeZyAxbAhbD/4iHPqPu13Axlh1oe1k1RRrNc7xKD7tfkrGkE9V88ZilheyLJl/87MDARP1n8yWtGywxS3Zwlb5FyRrvmCJigxZrQflDSism1HQcuuYAao7+HMplxFmN18tuZueVAXgFrFfaTqlTYm8AhMDG6VTM=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkCME" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkCME</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkCharitable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkCharitable</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtFirstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtFirstName</stringProp>
                  <stringProp name="Argument.value">${coordinatorUser}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtLastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtLastName</stringProp>
                  <stringProp name="Argument.value">Polaris</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlTitle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlTitle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlTitle_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlTitle_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlDepartment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlDepartment</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlDepartment_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlDepartment_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lstBusinessUnit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lstBusinessUnit</stringProp>
                  <stringProp name="Argument.value">NewYork Unit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lstBusinessUnit_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lstBusinessUnit_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;NewYork Unit&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[11],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lstCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lstCountry</stringProp>
                  <stringProp name="Argument.value">United States of America</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lstCountry_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lstCountry_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;United States of America&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[255],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtEmailAddr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtEmailAddr</stringProp>
                  <stringProp name="Argument.value">${coordinatorUser}@polaristest.net</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlLanguage</stringProp>
                  <stringProp name="Argument.value">English</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlLanguage_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlLanguage_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtPrimaryPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtPrimaryPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtPrimaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtPrimaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlPrimaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlPrimaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlPrimaryExt_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlPrimaryExt_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtSecondaryPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtSecondaryPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtSecondaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtSecondaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlSecondaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlSecondaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlSecondaryExt_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlSecondaryExt_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lbTherapeutic" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lbTherapeutic</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lbTherapeutic_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lbTherapeutic_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lbAreaOfFocus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lbAreaOfFocus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lbAreaOfFocus_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lbAreaOfFocus_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lbRoleAssigned" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lbRoleAssigned</stringProp>
                  <stringProp name="Argument.value">Grant Coordinator</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lbRoleAssigned_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lbRoleAssigned_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;Grant Coordinator&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[2],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlCurrency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlCurrency</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlCurrency_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlCurrency_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowGen_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowGen_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowLoa_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowLoa_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$RadNotification1$hiddenState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$RadNotification1$hiddenState</stringProp>
                  <stringProp name="Argument.value">../SessionExpired.aspx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_XmlPanel_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_XmlPanel_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_TitleMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_TitleMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="69 ${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="69 ${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctl00_StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636184410420000000:2221d3e:5915480e:20b66de5:155fb77e;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:1c2121e:3920021:d7e35272:3e0dfe6c:4f5793d0:623b54e:ed2942d4:c5d7b491;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:7a191ebc:57c52860:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:24ee1bba:f46195d3:c128760b:1e771326:2003d0b8:aa288e2d:258f1c72:b092aa46:92fe8ea0:fa31b949:874f8ea2:4877f69a:19620875:490a9d4e:c172ae1e:9cdfc6e7:e330518b:c8618e41:e4f8f289:1a73651d:333f8d94</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">ctl00$ContentPlaceHolder1$btnCreateUser</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">D40DFA0C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdACjKovTDezuHHw7NY5QvftO4b9nqwdWypTtCemG9feioPOpGM6pmY1E/IpLQTEONXJEykrk6MhqChj+uqn1YT72JBW6w17ed7b0IHTx0ZCWgnd+oEQG/z68nx61SI04CmVmJ97AZkO7zLypKHIp3sU7ztW+4ceBOY7RcqH8dui7ygMHozCBoMiJFLQQbei/eXjvhQG54jZ0s1MG/cNpG073hfp2Y1emKqXUXDnJNFmsQnRVdG1f2tJDVLqNsCK7nHYkIpCEnYgFhCIx3oNVwW3cF0PqXqzNR/Sx+qPcm3YYGNm99WkNRqZipwgVNmUC0zJUgcWI1ewHG7UWa8L1rUt0jw2dkKhoZaqQ6V6+ICcYxac8SSZfobCqmapHRpR8VeYyb/lQaf3gaKsku6UaxWBMSQhRdH9UJEOl1CeTsH6C8ks40Jtp1BDHFighJ9bt/g8wJEsAKZZUojurgh4FKnF5OKb1WTdCM7SuKaB1i3cKVnPIvRdW/CU/42XgHeMPkFwo186C6LibA9rfzVZI1DbpdHR/KhcRx10x0W7mV3diAd/ABmwhRcYNyV9OYzC0vohwZG790r9+tLP9PwBbxj0PGgYZ6Z52HbEHewc+tGGQ/aVOCWLUh3mEOCltHmn2zYiaOEd8bo58Y+Oyd9Yz6Pvdzt4Me06ygVNHFZvsk5IKp1MIl++D7bgre7f9Aj5ip8AoI609FpUYEoHc/cE+ir/zPHyfSRlped8g0XeZyAxbAhbD/4iHPqPu13Axlh1oe1k1RRrNc7xKD7tfkrGkE9V88ZilheyLJl/87MDARP1n8yWtGywxS3Zwlb5FyRrvmCJigxZrQflDSism1HQcuuYAaAloU/sSeuJnESVgaSHoBoC/CegTKE55F4iupoK9Kpmo=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkCME" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkCME</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkCharitable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkCharitable</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtFirstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtFirstName</stringProp>
                  <stringProp name="Argument.value">${coordinatorUser}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtLastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtLastName</stringProp>
                  <stringProp name="Argument.value">Polaris</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlTitle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlTitle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlTitle_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlTitle_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlDepartment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlDepartment</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlDepartment_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlDepartment_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lstBusinessUnit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lstBusinessUnit</stringProp>
                  <stringProp name="Argument.value">NewYork Unit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lstBusinessUnit_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lstBusinessUnit_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;NewYork Unit&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[11],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lstCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lstCountry</stringProp>
                  <stringProp name="Argument.value">United States of America</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lstCountry_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lstCountry_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;United States of America&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[255],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtEmailAddr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtEmailAddr</stringProp>
                  <stringProp name="Argument.value">${coordinatorUser}@polaristest.net</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlLanguage</stringProp>
                  <stringProp name="Argument.value">English</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlLanguage_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlLanguage_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtPrimaryPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtPrimaryPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtPrimaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtPrimaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlPrimaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlPrimaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlPrimaryExt_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlPrimaryExt_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtSecondaryPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtSecondaryPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$txtSecondaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$txtSecondaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlSecondaryExt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlSecondaryExt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlSecondaryExt_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlSecondaryExt_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lbTherapeutic" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lbTherapeutic</stringProp>
                  <stringProp name="Argument.value">All</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lbTherapeutic_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lbTherapeutic_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;All&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[0],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lbAreaOfFocus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lbAreaOfFocus</stringProp>
                  <stringProp name="Argument.value">All</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lbAreaOfFocus_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lbAreaOfFocus_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;All&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[0],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$lbRoleAssigned" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$lbRoleAssigned</stringProp>
                  <stringProp name="Argument.value">Grant Coordinator</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_lbRoleAssigned_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_lbRoleAssigned_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;logEntries&quot;:[],&quot;value&quot;:&quot;&quot;,&quot;text&quot;:&quot;Grant Coordinator&quot;,&quot;enabled&quot;:true,&quot;checkedIndices&quot;:[2],&quot;checkedItemsTextOverflows&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$ddlCurrency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$ddlCurrency</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_ddlCurrency_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_ddlCurrency_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkUserMgmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkUserMgmt</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkBudgetManagement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkBudgetManagement</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkSystemHistory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkSystemHistory</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkMapping" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkMapping</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkBusinessRules" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkBusinessRules</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkReports" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkReports</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkGrantReview" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkGrantReview</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkCommMgmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkCommMgmt</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkListmanagement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkListmanagement</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$chkTransferOwnerShip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$chkTransferOwnerShip</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowGen_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowGen_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowLoa_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowLoa_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$RadNotification1$hiddenState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00$RadNotification1$hiddenState</stringProp>
                  <stringProp name="Argument.value">../SessionExpired.aspx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_XmlPanel_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_XmlPanel_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_TitleMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_TitleMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="70 ${path}Admin/AdminUserManagement.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E</stringProp>
                  <stringProp name="Argument.value">E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminUserManagement.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminCreateInternalUser.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="79 ${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="79 ${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctl00$ScriptManagerMain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ScriptManagerMain</stringProp>
                  <stringProp name="Argument.value">ctl00$ScriptManagerMain|ctl00$lnkLogout</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_StyleManagerMain_TSSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_StyleManagerMain_TSSM</stringProp>
                  <stringProp name="Argument.value">;|636184410420000000:2221d3e:5915480e:20b66de5:155fb77e;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:45085116:9e1572d6:aac1aeb7:1c2121e:c86a4a06:ed2942d4:3e0dfe6c:d7e35272:4f5793d0:623b54e:c5d7b491;Telerik.Web.UI.Skins, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ebb5c032-2e2f-479c-962c-2b523327fb41:20fc936d:aa8c3a12:7681543b:ab5f5028:5da0f06:b3530f9e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ScriptManagerMain_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ScriptManagerMain_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.51116.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:fd384f95-1b49-47cf-9b47-2fa2a921a36a:ea597d4b:b25378d2;Telerik.Web.UI, Version=2016.1.225.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:4b258e7c-7002-4d3e-9fa4-709d417eed98:16e4e7cd:f7645509:88144a7a:ed16cbdc:58366029:7c926187:8674cba1:b7778d6c:c08e9f8a:24ee1bba:f46195d3:c128760b:1e771326:2003d0b8:aa288e2d:258f1c72:a51ee93e:59462f1:e330518b:c8618e41:e4f8f289:1a73651d:333f8d94:92fe8ea0:fa31b949:874f8ea2:4877f69a:19620875:490a9d4e:c172ae1e:9cdfc6e7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">ctl00$lnkLogout</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">F2E2B29D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                  <stringProp name="Argument.value">/wEdADQGrR6kOe4iQrvOtcY8eln3b9nqwdWypTtCemG9feioPOpGM6pmY1E/IpLQTEONXJEykrk6MhqChj+uqn1YT72JBW6w17ed7b0IHTx0ZCWgnd+oEQG/z68nx61SI04CmVmJ97AZkO7zLypKHIp3sU7ztW+4ceBOY7RcqH8dui7ygMHozCBoMiJFLQQbei/eXjvhQG54jZ0s1MG/cNpG073hfp2Y1emKqXUXDnJNFmsQnRVdG1f2tJDVLqNsCK7nHYkIpCEnYgFhCIx3oNVwW3cF0PqXqzNR/Sx+qPcm3YYGNm99WkNRqZipwgVNmUC0zJXyuDpJGJBPqPbJQytrafdwhRXXwPyajT/xwV/J2shm86POuHN4TNf5rC4qAlvPD1FdZQFHbTBgayafdkmOjinSUmzKFvIPLpWKTDfg87KkWgnLXs01BYLQsOy9xd89bkNapKzSaYKeekHe43Jo+cx1PXafhvPGOTVJ11vJyg3ZZ4RtzFlhjlLLJl+FHOZ0OuAIX/aD1arNqyHDg04hZVBEpbj96Gi+PvObsEYbEE+WpjvimSLevhmK81N0FeUn4M2YbziLx/4b9CkwuSMN6Rv8E7qYCRAbL4IvytaZLZig6DYY0bDM8jW84gJgc+3o76j3naMB5BqrrnV9pqcG3667u1kKm8Hk2Ik+I70HGNsGnNahYH5L5rtDFQ3+9gqqdW3PnGG1bEJVlucKTOMCtyocFjD+fHu5A1+/kgl5wGIi0rE6iHdBbipt8qHKeTocJbur+eIvQP+nhrKXptbliblBWJZZVCxWPo1Cse0ztA6hGkjI1Wm7VDBeb2Tnio6EoeAPo1PJgYiFLtLtiiXCJHKu/jdv8ag0/Q80+Xq7Pk9qOrp5P/tggVQJv9058CimbG0Ad9Ii9qlCykb0UUtOXcjdcRhxCi7Rx2fPCVaBXffBOQYXO6MUjgZHQ4cH4Rs9dfgM/ZPsI1+FzXL5RtXyE0jVP0yAcC9J1E0BKvY2kVOVB0Tk5X8exeUAiyWSILthCd9pzUJs2GQpWt7HzjrNgQXd7Hbb1c32eaq1mFwoP3lYB2tGywxS3Zwlb5FyRrvmCJigxZrQflDSism1HQcuuYAax3ya8V7Gg+wlODSBNt4eywN8BiVu3r6W0QZfqBgizjE=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_last_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_last_name</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_first_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_first_name</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_email_address" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_email_address</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date$dateInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$RDIPFlast_login_date$dateInput</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_dateInput_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_dateInput_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;enabled&quot;:true,&quot;emptyMessage&quot;:&quot;&quot;,&quot;validationText&quot;:&quot;&quot;,&quot;valueAsString&quot;:&quot;&quot;,&quot;minDateStr&quot;:&quot;1900-01-01-00-00-00&quot;,&quot;maxDateStr&quot;:&quot;2099-12-31-00-00-00&quot;,&quot;lastSetTextBoxValue&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl02_ctl02_RDIPFlast_login_date_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;minDateStr&quot;:&quot;1900-01-01-00-00-00&quot;,&quot;maxDateStr&quot;:&quot;2099-12-31-00-00-00&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_TemplateColumn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl02$ctl02$FilterTextBox_TemplateColumn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl03$ctl01$PageSizeComboBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$ContentPlaceHolder1$grdInternalUsers$ctl00$ctl03$ctl01$PageSizeComboBox</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl03_ctl01_PageSizeComboBox_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ctl00_ctl03_ctl01_PageSizeComboBox_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_SD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_SD</stringProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_AD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_gdtcSharedCalendar_AD</stringProp>
                  <stringProp name="Argument.value">[[1900,1,1],[2099,12,31],[2017,4,11]]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_rfltMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_rfltMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_ContentPlaceHolder1_grdInternalUsers_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_ContentPlaceHolder1_grdInternalUsers_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowFAQ_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowFAQ_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowHelp_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowHelp_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowPrivacyPolicy_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowPrivacyPolicy_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowContact_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowContact_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowTerms_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowTerms_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowGen_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowGen_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_radWindowLoa_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_radWindowLoa_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00$RadNotification1$hiddenState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ctl00$RadNotification1$hiddenState</stringProp>
                  <stringProp name="Argument.value">../SessionExpired.aspx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_XmlPanel_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_XmlPanel_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ctl00_RadNotification1_TitleMenu_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctl00_RadNotification1_TitleMenu_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__ASYNCPOST" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__ASYNCPOST</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="RadAJAXControlID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">RadAJAXControlID</stringProp>
                  <stringProp name="Argument.value">ctl00_RadAjaxManagerProductMater</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-MicrosoftAjax" elementType="Header">
                  <stringProp name="Header.name">X-MicrosoftAjax</stringProp>
                  <stringProp name="Header.value">Delta=true</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="80 ${path}Logout.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}Logout.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="81 ${path}Default.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}Default.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="82 ${path}DefaultBU1.aspx" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}DefaultBU1.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${http}://${ip}${path}Admin/AdminUserManagement.aspx?2CE32989DCB8436E32E89CCE5499A44B49044B0608EB9E4471514316465D3E8BB7DD989A29C965C36B2D86752C66C39E=E8254DE39689711F555C147D8074A2E9DF59A3FC565C55913578DC96E64D5FD194AF9A3DA6F5EB8B6BD73E1F1F4CAA56</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
